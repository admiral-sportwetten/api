FORMAT: 1A

# ASWAPI

ASWAPI stands for Admiral API which is to be the single point of entry for using
Admiral Sportsbetting functionality.

The API is designed to use all the commonly accepted principles of REST interface
development.

<table>
    <tr>
        <th>
            Status code
        </th>
        <th>
            Description
        </th>
    </tr>
    <tr>
        <td>
            200
        </td>
        <td>
            The request has completed successfully and a response is provided.
        </td>
    </tr>
    <tr>
        <td>
            201
        </td>
        <td>
            The request has completed successfully and the item is creates successfully.
        </td>
    </tr>
    <tr>
        <td>
            204
        </td>
        <td>
            The request has completed successfully but no response is required.
        </td>
    </tr>
    <tr>
        <td>
            202
        </td>
        <td>
            The request has completed successfully but the request processing has not finished yet.
        </td>
    </tr>
    <tr>
        <td>
            304
        </td>
        <td>
            The requested document was not modified.
        </td>
    </tr>
    <tr>
        <td>
            400
        </td>
        <td>
            The request could not be understood by the server.
        </td>
    </tr>
    <tr>
        <td>
            401
        </td>
        <td>
            The request requires user authentication which was not provided
        </td>
    </tr>
    <tr>
        <td>
            403
        </td>
        <td>
            The server understood the request but will not fullfill it.
        </td>
    </tr>
    <tr>
        <td>
            404
        </td>
        <td>
            The required document was not found.
        </td>
    </tr>
    <tr>
        <td>
            500
        </td>
        <td>
            The server encountered an unrecoverable exception, which prevents the
            request to complete.
        </td>
    </tr>
</table>

## Group Customer

Resource related to the customer and the management of their data

## Customer [/customers/{customerName}]

A customer is a user known to the system with the potential to produce hold on the disctribution channel

+ parameters
    + customerName: John124 (required, string) - The customers unique name

### View  customer details [GET]

+ Response 200 (application/json)

    + Attributes
        + salutation: Mr/Mrs (string) - The salutation whith whicht the customer wishes to be addressed
        + name: John (string) - The customers real name
        + surname: Doh (string) - The customers real surname
        + birthday: 25.10.1982 (string) - The customers birthday
        + address (object)
            + street: Last street (string) - The customers street of residence
        + password: Johny123rocks (string) - The customers password


    + Body

            {
                "salutation": "Mr.",
                "name": "John",
                "surname": "Doh",
                "birthday": {
                    "day": 25,
                    "month": 10,
                    "year": 1982
                },
                "address":{
                    "street": "Some street",
                    "houserNumber": "25/3",
                    "zip": "1200",
                    "city": "Vienna",
                    "country": "AUT"
                },
                "password": "Johny123rocks",
                "userName": "Johny123",
                "userTimeZone": "GMT+2",
                "currency": "EUR",
                "oddsFormat": "EU",
                "securityQuestion" : {
                    "question": "Happy place",
                    "answer": "back garden",
                    "hint": "Where I proposed"
                },
                "termsAndConditionsAccepted": true,
                "newsletter" : {
                    "sms": false,
                    "email": true
                }
            }

+ Response 404 (application/json)

        {
            "Message" : "Data not found"
        }


### Create new customer [POST]

+ Request (application/json)

        {
            "salutation": "Mr.",
            "name": "John",
            "surname": "Doh",
            "birthday": {
                "day": 25,
                "month": 10,
                "year": 1982
            },
            "address":{
                "street": "Some street",
                "houserNumber": "25/3",
                "zip": "1200",
                "city": "Vienna",
                "country": "AUT"
            },
            "password": "Johny123rocks",
            "userName": "Johny123",
            "userTimeZone": "GMT+2",
            "currency": "EUR",
            "oddsFormat": "EU",
            "securityQuestion" : {
                "question": "Happy place",
                "answer": "back garden",
                "hint": "Where I proposed"
            },
            "termsAndConditionsAccepted": true,
            "newsletter" : {
                "sms": false,
                "email": true
            }
        }

+ Response 201 (application/json)

+ Response 403 (application/json)

### Remove customer [DELETE]

+ Response 202 (application/json)

## Customer details [/customers/{customerName}/isunique]

Determine if the given user name is already taken.

+ parameters
    + customerName: John123 (required, string) - The customers unique name

### Check customer name [GET]

+ Response 200 (application/json)

        {
            "IsUnique": true
        }

+ Response 200 (application/json)

        {
            "IsUnique": false,
            "Suggestions": ["John123!", "BetJohn123", "John1232"]
        }
