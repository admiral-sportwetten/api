FORMAT: 1A

# ASWAPI

ASWAPI stands for Admiral API which is to be the single point of entry for using
Admiral Sportsbetting functionality.

The API is designed to use all the commonly accepted principles of REST interface
development.

<table>
    <tr>
        <th>
            Status code
        </th>
        <th>
            Description
        </th>
    </tr>
    <tr>
        <td>
            200
        </td>
        <td>
            The request has completed successfully and a response is provided.
        </td>
    </tr>
    <tr>
        <td>
            201
        </td>
        <td>
            The request has completed successfully and the item is creates successfully.
        </td>
    </tr>
    <tr>
        <td>
            204
        </td>
        <td>
            The request has completed successfully but no response is required.
        </td>
    </tr>
    <tr>
        <td>
            202
        </td>
        <td>
            The request has completed successfully but the request processing has not finished yet.
        </td>
    </tr>
    <tr>
        <td>
            304
        </td>
        <td>
            The requested document was not modified.
        </td>
    </tr>
    <tr>
        <td>
            400
        </td>
        <td>
            The request could not be understood by the server.
        </td>
    </tr>
    <tr>
        <td>
            401
        </td>
        <td>
            The request requires user authentication which was not provided
        </td>
    </tr>
    <tr>
        <td>
            403
        </td>
        <td>
            The server understood the request but will not fullfill it.
        </td>
    </tr>
    <tr>
        <td>
            404
        </td>
        <td>
            The required document was not found.
        </td>
    </tr>
    <tr>
        <td>
            500
        </td>
        <td>
            The server encountered an unrecoverable exception, which prevents the
            request to complete.
        </td>
    </tr>
</table>

## Group Customer

Resource related to the customer and the management of their data

## Customer [/customers/{customerName}]

A customer is a user known to the system with the potential to produce hold on the disctribution channel

+ parameters
    + customerName: John124 (required, string) - The customers unique name

### View  customer details [GET]

+ Response 200 (application/json)

    + Attributes
        + salutation: Mr/Mrs (string) - The salutation whith whicht the customer wishes to be addressed
        + name: John (string) - The customers real name
        + surname: Doh (string) - The customers real surname
        + birthday: 25.10.1982 (string) - The customers birthday
        + address (object)
            + street: Last street (string) - The customers street of residence
        + password: Johny123rocks (string) - The customers password


    + Body

            {
                "salutation": "Mr.",
                "name": "John",
                "surname": "Doh",
                "birthday": {
                    "day": 25,
                    "month": 10,
                    "year": 1982
                },
                "address":{
                    "street": "Some street",
                    "houserNumber": "25/3",
                    "zip": "1200",
                    "city": "Vienna",
                    "country": "AUT"
                },
                "password": "Johny123rocks",
                "userName": "Johny123",
                "userTimeZone": "GMT+2",
                "currency": "EUR",
                "oddsFormat": "EU",
                "securityQuestion" : {
                    "question": "Happy place",
                    "answer": "back garden",
                    "hint": "Where I proposed"
                },
                "termsAndConditionsAccepted": true,
                "newsletter" : {
                    "sms": false,
                    "email": true
                }
            }

+ Response 404 (application/json)

        {
            "Message" : "Data not found"
        }


### Create new customer [POST]

+ Request (application/json)

        {
            "salutation": "Mr.",
            "name": "John",
            "surname": "Doh",
            "birthday": {
                "day": 25,
                "month": 10,
                "year": 1982
            },
            "address":{
                "street": "Some street",
                "houserNumber": "25/3",
                "zip": "1200",
                "city": "Vienna",
                "country": "AUT"
            },
            "password": "Johny123rocks",
            "userName": "Johny123",
            "userTimeZone": "GMT+2",
            "currency": "EUR",
            "oddsFormat": "EU",
            "securityQuestion" : {
                "question": "Happy place",
                "answer": "back garden",
                "hint": "Where I proposed"
            },
            "termsAndConditionsAccepted": true,
            "newsletter" : {
                "sms": false,
                "email": true
            }
        }

+ Response 201 (application/json)

+ Response 403 (application/json)

### Remove customer [DELETE]

+ Response 202 (application/json)

## Customer details [/customers/{customerName}/isunique]

Determine if the given user name is already taken.

+ parameters
    + customerName: John123 (required, string) - The customers unique name

### Check customer name [GET]

+ Response 200 (application/json)

        {
            "IsUnique": true
        }

+ Response 200 (application/json)

        {
            "IsUnique": false,
            "Suggestions": ["John123!", "BetJohn123", "John1232"]
        }


## Group Login

User authentication facilities

## Session management [/login]

The customers session is managed usign the _login_ collection

### Login customer with timeout [POST]

+ Request (application/json)

        {
            "username": "john123",
            "password": "john123Rocks",
            "ttl": 12345534
        }

+ Response 200 (application/json)

        {
            "Token": "21872364591487569123847512984765214765284",
            "Ttl": 12345534
        }

+ Response 400 (application/json)


### Logout customer [DELETE]

+ Response 204 (application/json)


### Extend customer session with timeout [PUT]

+ Request (application/json)

        {
            "Ttl": 1234345
        }

+ Response 201 (application/json)

        {
            "Token": "21872364591487569123847512984765214765284",
            "Ttl": 1234345
        }

+ Response 404 (appliction/json)

+ Response 400 (application/json)

## Group Betslip

All functionality regarding betslip management

## Get betslip [/betslip]

### Get customers betslip [GET]

+ Request (application/json)

    + Header

            Token: 2347289372687236428734692834795h

+ Response 200 (application/json)
    + Headers

            Location: /betslip/john123
            X-Response-Time: 25ms

    + Body

            {
                "BetSlipType": "Single",
                "Currency": "EUR",
                "OddsDisplayFormat": "EUR",
                "Odds": [
                    {
                        "OddId": "1a45a986-b028-4704-ae6f-6c9b3cd076c7"
                        "IsLive": true,
                        "EventName": "Uganda : Gambia",
                        "BetName": "Endergebnis - *Tipp Salvadore*",
                        "Odd": 1.04
                        "Stake": 1.24,
                        "PossibleWining": 1.29
                    }
                ]
            }

## Group Shops

Functionality to retrieve and manage a list of all __therestrial__ shops.
This also includes all functionall goodies for working with the list.

## Basic shop operations [/shops]

The basic shops operations include:
* Get a list of all shops visible by the given session
* Create a new shop
* Edit shops
* Delete a shop from the list

### Get all shops [GET]

+ Request (application/json)
    + Headers

                Token: 2342897649283749618273691874123123

    + Body

                {}

+ Response 200 (appliction/json)
    + Headers

                X-Response-Time: 20ms

    + Body

                {
                    "status": "OK",
                    "listSize": 200,
                    "sortedBy": "address",
                    "shops": [
                        {
                            "id": "1a45a986-b028-4704-ae6f-6c9b3cd076c7",
                            "address": {
                            "street": "FirstStreet",
                            "houserNumber": 2,
                            "zip": 2030,
                            "city": "MegaCity10"
                        },
                        "geo": {
                            "lattitude": 14.234123,
                            "longitude": 45.34534345
                        },
                        "capabilities": [
                            "offlinetTerminals",
                            "onlineTerminals",
                            "gastro",
                            "liveStreaming"
                        ],
                        "Description": "A nice little place to go and losse your money",
                        "Image": "https://static.admiral.at/stores/megacity10.png"
                        }
                    ]
                }

## Find shop in vicinity [/shops/{lattitude}/{longitude}?limit={resultLimit}&measure={resultMeasure}]

All results are sorted by asceding distance from the users current possition.


+ Parameters
    + lattitude: 14.234234 (required decimal) - the customers current lattitude
    + longitude: 45.2342342 (required decimal) - the customers current longitude
    + resultLimit: 10 (optional number) - the maximal number of shops returned
    + resultMeasure: km ( string) - the measurement in whitch the distance is measured


### Get all shops in my vicinity [GET]


+ Request (applition/json)

    + Headers

            Location: /shops/14.3242234/45.2342342



+ Response 200 (application/json)

                {
                    "status": "OK",
                    "listSize": 5,
                    "maxRadius": 25,
                    "shops": [
                        {
                            "geo":{
                                "lattitude": 14.234234,
                                "longitude": 45.2324234
                            },
                            "shortDescription": "Flagship store 1",
                            "address":{
                                "street": "Some street",
                                "houserNumber": "25/3",
                                "zip": "1200",
                                "city": "Vienna",
                                "country": "AUT"
                            }
                        }
                    ]
                }

## Group Tickes

## Get ticket data [/tickets/{ticketNumber}]

Retrieves all available data for the given ticket.

Ticket information is available without authorization.

+ Parameters
    + ticketNumber: T-000000-7529-aa07-47b (required string) - the ticket number


### Get ticket data [GET]

+ Request

    + Headers

            Location: /tickets/T-000000-7529-aa07-47b

+ Response 200 (application/json)

    + Headers

            X-Response-Time: 17ms

    + Body

            {
                "status": "NotEvaluated",
                "customer": "Johny123",
                "CardId": "399085",
                "timestamp": "2015-06-22T13:15:00Z",
                "ticketId": "T0000007529AA0747B",
                "deviceId": "066604",
                "location": {
                    "name": "TestLabor",
                    "street" : "Novomatistrasse",
                    "houserNumber": "5",
                    "zipcode": 2352,
                    "city": "Gumpoldskirchne"
                },
                "betType": "single"
                "bets": [
                {
                    "name": "Klub-Freundsaftspiele (6BCD) Mlada Boleslav: AS Trencin",
                    "gameId": "1a45a986-b028-4704-ae6f-6c9b3cd076c7",
                    "odsType": "1X2",
                    "selectedOdd": "X",
                    "selectedOddId": "1a45a986-b028-4704-ae6f-6c9b3cd076c7",
                    "stake": 50,
                    "odd": 3.9
                }
                ],
                "totalOdd": 3.9,
                "totalStake": 50,
                "oddsFormat": "EU",
                "currency": "EUR",
                "possibleWinnigs": 195
            }

## Check tiket status [/tickets/{ticketNumber}/status]

Most users just want to see if their ticket has won or lost. For those we provide
this easy to understand check method thatonly gives the information if the given
ticket is evaluated successfully or not.

In the case that the ticket evaluation did not yet hapen the method will answer
with a 404.

+ Parameters
    + ticketNumber:T-000000-7529-aa07-47b (required string) - The ticket number found on the physical ticket

### Get ticket status [GET]

+ Request
    + Headers

            Location: /tickets/T-000000-7529-aa07-47b/status

+ Response 200 (application/json)
    + Headers

            X-Response-Time: 10ms

    + Body

            {
                "status": "won",
                "hasWon": true
            }


+ Response 404 (application/json)
    + Headers

            X-Response-Time: 5ms
